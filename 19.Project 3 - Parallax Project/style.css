html {
    box-sizing: border-box;
}

*,*::after,*::before {
    box-sizing: inherit;
}

body {
    margin: 0;
    padding: 0;
    background-color: #111111ea;
    color: #fff;
} 

.first-image{
    background-image: url("./src/free-photo-of-vibrant-blue-and-yellow-macaw-in-nature.jpeg");
    min-width: 100%;
    height: 600px;
    opacity: 0.8;
    /*! With the help of Opacity property we can control the opacity or we say how much opaque  our element. Opaque refers to something that is not transparent or translucent, meaning you cannot see through */
    /*? So scale of our opacity or alpha-channel was 0 - 1 in between in points we give opacity */

}

.second-image {
    background-image: url("./src/pexels-photo-13248515.jpeg");
    min-width: 100%;
    height: 600px;

}

.third-image{ 
    background-image: url("./src/pexels-photo-31663212.webp");
    min-width: 100%;
    height: 600px;
    opacity: 0.8;

}

.first-image,.second-image,.third-image,.fourth-image {
    background-position: center;
    /*! With the help of background-position we define the position of our element. We can give position in both vertically and horizontally. */
    background-size:cover;
    /*! With the help of background-size property we can define the size of our background-image with some given value and also give manual value too !!  */
    background-repeat: no-repeat;
    /*! With the help of background-repeat property we can control repeatetion of our background-image in both main-axis and cross-axis together or individually and if we don't want the background-image repeatation than we give value "no-repeat" than it's does not repeat our background. */
    background-attachment: fixed;
    /*! With the help of bacground-attachment decide the background-image was attach to there parent element or attach to viewport so above we give value "fixed" that's mean it was fixed or we say attach to it's viewport it was not scroll with contant they still remain there as fixed and content was scrollable there are other value also like scroll, etc.  */


} 


section {
    text-align: center;
    padding: 3rem 5rem;
    line-height: 1.5;

} 

section p {
    font-size: 1.2rem;
} 

.section-light {
    background-color: #f4f4f4;
    color: #111111ea;
}  


.image {
    /* display: flex;
    justify-content: center;
    align-items: center; */ 
    position: relative;
} 


.image div {
    position: absolute;
    top: 50%;
    width: 100%;
    text-align: center;
    color: #fff;
    font-size: 2.5rem;
    text-shadow: 1px 1px 5px black;
    letter-spacing: 1.5px;
    text-transform: capitalize;
} 

.first-image div > span, .second-image div > span, .third-image div > span {
    background-color: #111111e0;
    padding: 20px;
}


/*! Position Property of CSS */
/* The Position property was most important property with the help of position property we decide how our html element was position in our webpage  */ 

/*? There was 5 types of position property we can see in our css */
/** 1st. Static property */
/* This was the default property of css which helps to set how an element is positioned in a document. The top, right, bottom, left, and z-index have no effect on this property.   */ 

/** 2nd. Relative property */
/* In this Relative property of position here also elements are in its normal flow of documents but here off-set properties top, bottom, left and right was unlocked with the help of this property we can give position or place our element in our layout. In Relative property element was relative to its own original position. */ 

/** 3rd. Absolute property */
/* In position: absolute, the element is removed from the normal document flow, and no space is reserved for it — it behaves like it was never part of the flow. We can move or place the element using the offset properties top, bottom, left, and right. The absolute element is positioned relative to its nearest ancestor that has a position of relative, absolute, fixed, or sticky.
Otherwise, if there is no such non-static parent, it will be positioned relative to the <html> (root) element.  */ 

/** 4th. Fixed Property */
/* In the fixed position property, the element is removed from the normal document flow, and no space is reserved for it — it behaves as if it was never part of the flow. It is fixed relative to the viewport and does not move when the page is scrolled. We can move or place the element using the offset properties top, bottom, left, and right.
 */ 


 /** 5th. Sticky Property */
 /*  In the sticky position property, the element behaves like relative at first — meaning it stays in the normal document flow and space is reserved for it.
But when you scroll and the element reaches a certain point (based on top, bottom, left, or right offset values), it becomes "stuck" and behaves like fixed, sticking to that position on the screen while you keep scrolling.

After scrolling further (depending on the parent boundaries), it may stop sticking if the parent container ends. */